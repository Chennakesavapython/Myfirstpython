15/July


--> what is python ?
   -> it is high level language
   -> scripting language
   ->object-oriented language

->language?
   -> -> Communication (Words, Writing, Speech, Gestures etc)  

            -> Regions(South India - North India - East Of India) (Culture)

                -> Hindi, Telugu etc
            
    -> Programming Language ?

        -> Machines cannot understand Languages like English, Hindi etc

        -> Machines know only Binary Language (011101111)

        -> User will Communicate with a computer using Programming Language

    ->  A programming paradigm is a relatively high-level way to conceptualize 
        and structure the implementation of a computer program. 
            -> Imperative, Declarative, Object-Oriented, Functional etc
    
    -> NOTE: Python is a multi paradigm Programming Language 

    -> Imperative - How To do a task  (Python, Java, C etc)  

    -> Declarative - What To do (SQL, CSS, Python etc)  

    -> Functional - Everything is functions(Haskell, Lisp, Python etc)

        -> Lambda Expressions, Higher Order Functions etc
    
    -> Object Oriented - Taking real world objects and represent them in programs

    -> Scripting -  A scripting language is a programming language 
        designed to automate tasks (DevOps & Cloud)


    -> 01010000 01111001 01110100 01101000 01101111 01101110 (Low Level)

    
    -> Indentation

        -> { } [ ] ( ) ; Other programming languages

        -> Space 
    
    -> Java Program to add two numbers

        class AddNumbers {
            public static void main(String [] args) {
                public int num1 = 10;
                public int num2 = 20;
                int sum = a+b;
            }
        }
    
    -> Python Program to add two numbers
        
        num1 = 10
        num2 = 20
        sum = a+b
    
    -> Java (Static Typed -- You need to tell before hand what datatype to apply )  
        
        String brandName = "The Indian Garage Co";
        double ratings = 4.2;
        int size = 34;

    -> Python (Dynamic Typed -- You don't need to tell before hand what datatype to apply )
        
        brand_name = "The Indian Garage Co"
        ratings = 4.2
        size = 34

        print(f"Brand is {brand_name}")
        print(f"Ratings are {ratings}")
        
        NOTE: Applied On Object Level
    
    -> Java vs Python

        -> Java is Fast (Compiled Language) 

        -> Python is Slow (Interpreted Language) (Line By Line) 

        -> Java Learning Curve is HIGH (Proto Type - 6 Months)

        -> Python Learning Curve is EASY (Proto Type - 6 Weeks)

17th July
=========

    -> Setup Python Environment

        -> Setup Python Interpreter (Run Python Code)    

        -> IDE (Integrated Development Environment) - VS CODE

        -> Git Bash (Version Controlling) (Tracking Source Code) (Client Software)

        -> Setup GitHub Account (Store Code) (Service Provider)   

        19th July

        -> There are two modes to execute program of python
        ->Script mode
                       ->IDE
        -> interactive mode or commond mode
                  ->Python Interpreter


      -> Keyword
         -> it is predefined reserved words   ex-async,break etc   

       -> variables

           ->to store data     


        -> datatype
            ->to store different types of data.there aredifferent types of datatypes


       ->sort of variables we create ,we have rules

       ->Identifiers
          -> can letters(a-z)
          ->numbers
          ->Underscore

         ->Must start with
            ->alphabets
            ->Underscore
         ->cannot start with digit
         ->cannot be a phython Keyword           

       -> we use type() to know what type of data
       -> we use id() to know the addres sof the data  




         24/07/25

  =>Control statements


  ==> conditioal statements
  => conditional statements with output a boolean value is based  on conditional declaration.



  Indentation rules
      => use either space or tabes,but not both(python recommends 4 spaces)

      => make sure all the lines same block,have same indention level

      => input() = predefined function in python that interacts with the user.



    =>    type conversion
        -> it converts one datatype to another datatype
        ->> converting smaller datatype to lager datatype is considered as ssafe operation (Or) ["widening"]
        ->> its automatically handled by python.



        -> converting larger data type to samller datatype is called typecasting.
        ->it is handled by the developer

        -> int() ----> float() etc


        -> ternary operator/ conduional operator





  




     => if
          = > executes when if is true condition
     ,ifelse
     allows to check one or two conditions
     ,elif
     it allows to check multipleconditions statements,
     => matched case(3.1+1)


     => Nested condition = > inside a condition we can write the same condition.



     26/07/25
      -> Loops - Execute a block of code repeatedly, based on
        a condition

        -> When you want to repeat a task you rely on loops

        -> Types Of Loops 

            -> while loop - runs a block of code, as long as 
                the condition is True

            -> for loop - used to Iterate over a sequence
                (strings, lists, tuples etc) 

                -> you can use for loop when you know number
                    of Iterations before hand
            
            -> Nested Loops - Loop inside another loop

    -> Branching Statements (Jump Statements)         

        -> break - stop the execution of loop / terminate  the loop

        -> continue - used to skip the current Iteration

        -> pass - does nothing, used as a placeholder for future code



        =============
        -> variable = 10
        -> multiple values = 10 20 40 incorrect

        ->collection -sequence of data which 

        -> basic collection type is strings
        -> Advanced collection types
        ->lists
        ->tuples
        ->distonaries
        ->>sets

        -> strings



        -->python goes indexing for accessing individual characters.
             ->we have positive indexing(left to right)
             -> we have neagative indexing (right to left)

             0  1  2  3  4  5  (positive)
             p  y  t  h  o  n 
             -6 -5 -4 -3 -2 -1 (negative)


             ->Accessing index out of range causes an error
                    IndexError: string index out of range
    -> Slicing -to access a range of characters inside the string 
       (range) => start,stop,Setup


       slicing - > start.stop,stepup




     -> Stringimmutability
        -> data once created can not be changed.


































7th august 2025

-> Dictonaries

->In python dictionaries are built in data structure that allows to store multile sets
    of keys & values in a single variable using {} (curly brackets)

-> key value Pairs (item)    
-> it has no indexing no slicing-> no concept ofinex in dictionaries

---> As we use key & values
    
     -> keys can be Immutables (tuples,strings)
     -> values can be a object
        
     ->> if we give keys to mutable ,we get unhashable tpe error

     -> we cannot use list as key inn dictionaries
     -> we cannot use list as a set element element

     -> 90% of the timme keys will be strings





     -> Sets

-> In python, Sets are built in data structure that allows to store multiple 
    values in a single variable using { } (curly braces)

-> In sets we don't have keys like Dictionaries, only values

    -> dict = {1:10,2:20}
    -> set = {1,10,2,20} -> {10,20,1,2}

-> Set are UUU 

    -> U - Unique (No Duplicates, Duplicates will be removed)
    -> U - Unorderd (Insertion Order Not Preserved)
    -> U - Unindexed (No Index, So NO INDEXING & NO SLICING)

    -> SETS - used to perform Set related mathematical operations

    -> Union
    -> Intersection
    -> Difference 
    -> Symmetric Difference


9th Aug
=========

-> Set operations

-> Sets have 17 methods 

-> FrozenSet

    -> Regular Set is Mutable (Can be Changed)
    -> FrozenSet is Immutable (Cannot be Changed)

    -> FrozenSets only support set specific operations


-> Key Characteristics of Sets

    -> UnOrdered - Items are not stored in order, and order is not preserved

    -> MUTABLE - You can change data

    -> Duplicates - Not Allowed         

    -> NOTE - When you need Uniqueness in data go for sets

    NOTE- IMMUTABLE version of set is FROZENSET use frozenset class


-> Database operations

    -> CRUD - Create / Read / Update / Delete 

        -> In future w.r.t Databases you can perform them using Web Applications

        -> Now we are going to use Console Based Programs to achieve same

    -> LMS (Student - Trainer - Course - etc)   

        -> We want all our data structures to be implemented using LMS Applications

            -> Lists - Scores
            -> Tuples - ?
            -> Dictionaries - student 
            -> Sets - Skills

        -> Student (ID,Name,Scores,Skills)



        12 Aug 2025

  ==> Data structure

   16th aug 2025
   =============


   ==> Functional Based Programming
       -> function  - Function is a block of code which perform some tasks or actions or applications.

       -> functions can help break down complex problems into simpler and mallwe manageble tasks
        
        -> you can call a function,multiple times which avoids code repetition
        and helps you get code reusability

        -> function syntax
            def function_name():
            statements

        -> function with parameters
           -> This approach allows your function to take dynamic inputs  
        ->Based on arguments passes,we have different typess of functions
          1.positional arguments
          2.default arguments
          3.keyword arguments
          4.arbitary positional arguments  (*args)
          5.arbitrary keyword arguments    (**kwargs) 

       1.positional arguments --> the passed argument to the function,should have exact order defind in function signature
         
          -> here positions will change fuctionality,if incorrectly used
       2. default arguments
           -> passing default values as a arguments to the function
        -> default values will be overridden by values passed at the function call
        -> once start adding a default argument ,the next preceeding values should be default only not other types
 


      3.keyword arguments
        ->arguments are passed by expplicitly specifying the name ,so function call is based on the name of the argument
        -> order doesn't matter any more.

        ->improves code readuability and avoids confusion,when multiple parameters.

       4.arbitary [random or unknown] positional arguments  (*args)  

        -> these function will accept any number of positions based on the argument

        -> all values will be collected into tuple

       5.arbitrary keyword arguments    (**kwargs) 

         -->  These functions will accept any number of keywords based argumnents 

         --> All values will be collected into a dictionary.


 17th Aug
=========

-> Return keywords is used in functions to give 
    appropriate response when function is called

-> Generally return should be the last Statement, inside
    the function execution

-> If we are using multiple return Statements sequentially
    the first return will be executed, not the others

-> You can have multiple return Statements, but the Logic
    should be appropriate


-> Scope Of Variables Within Functions

    -> Scope - where in the code, a variable can be used 
        or not

    -> Local Scope

        -> A Local variable declared inside a function
        -> It only exists while the function runs
        -> You cannot use them outside the function

    -> Global Scope  

        -> A Global variable is declared outside the function
        -> It can be used anywhere in code, inside or outside
            functions
        -> As globals variables can be accessed within Functions
            and there can be a name conflict, in that case
            Local variables get first preference inside functions
        -> You cannot change global variables(read only by default)      
        -> If you want them to change inside function, then we need
            to use a special keyword called global

    -> Function Composition

        -> Function calling another function for reusability

-> Types Of Functions

    -> Built In Functions

        -> Functions which are already pre built into python

        -> No need to define them, they are ready to use

            -> print() -> display output
            -> id() -> display object address
            -> input() -> take user input
            -> len() -> number of elements
            -> max() -> give largest element
            -> etc

    -> User Defined Functions

        -> Functions that your create by yourself, based on 
            requirements using def keyword

        -> Whatever we did so far are user defined functions    

    -> Lambda Functions (Anonymous Functions)

        -> Lambda functions are One line functions

        -> NOTE - Used only for Single line Expressions

        -> We use lambda keyword, and result of the Expression
            is automatically returned 
        
        -> Mainly used for tasks, when passing a function 
            as an argument

        -> syntax

            lambda arguments: expression    

            NOTE: arguments cab ne multiple, but only one line expression

        -> IILE - Immediately Invoked Lambda Functions         


19th Aug
=========

-> Core Idea Of Functional Programming

    -> Just like lambda functions, functions that take another function as an argument

    -> We use higher order functions

        -> map
        -> filter
        -> reduce

    -> We want to write concise code, without using lengthy code like custom loops


    -> map - Used to applying a function on each item in the iterable 

        -> earlier we used some for loop and performed operations

        -> syntax 

            map(function, iterable)

        -> Think of map() as - Do this for every item in the iterable

    
    -> filter - Used to applying a function on each item in the iterable with a condition

        -> earlier we used some for loop with condition and performed operations

        -> syntax 

            filter(function, iterable)
        
         -> Think of filter() as - Keep Only items, where the condition is met

    -> reduce -  used to reduce an iterable to single value, applying the function
        cumulatively 

            -> syntax 

            reduce(function, iterable)

        -> reduce is a part of module (functools), so we need to import before using it 


    -> TASK - Rewrite the LMS DS App with below implementation

        -> if choice == "1":
            add_student()

        -> if choice == "2":
            update_student()
        
        -> Implement a new option to work a search criteria, where search students 
            should displayed based if has that skill

            print("4 - List All Students")
            print("5 - Search")    
            print("6 - Exit System")  

            -> NOTE - Use lambda based approach         


21 aug 2025
-> Modules Continued

-> External Modules are available in pypi.org

-> Packages 

    -> For Reusability ( on folder level)   

    -> Module - A single file, used file name 
    -> Package - A folder with multiple modules - multiple .py files
        use folder name

    -> To create a package will create a file called 

        __init__.py ( empty / start up configs )



-> File & Directory Management

    -> File operations

        -> Create
        -> Read 
        -> Update
        -> Delete

    -> Earlier all the programs data is non-persistent (RAM)

        -> non-persistent data - Temporary

    -> Now i need the programs to save data (persistent data)

        -> persistent data - Long Term Storage

23rd Aug
=========

-> File Management with csv data

    -> Python does provide csv module out of the box, we can perform operations on csv files

    
-> File Management with json data

    -> Python does provide json module out of the box, we can perform operations on json files

    -> Data exchange formats 

        -> XML 
        -> JSON
        -> YAML  

    -> JSON looks like a Dictionary in python

        -> json.dump() - write json to file
        -> json.load() - Read json from file

        -> json.dumps() - covert python dict to string
        -> json.loads() - covert string to python dict

    25t aug 2025

       -> Exception Handling

       ->> exception : its an errorv,which occurs during the program execution
       ==> when python encounters an ERROR ,itd abruptly stops the program.    


       ---> to change eror behaviour ,and handle the exceptions by ourself we need to follow 

       ->try:used to keep the code that cause the error
       -> except: use to keep the code that should run when error occurs
       ->else: run if no exception is rised in the try block.
       -> finally : runs the code no matter what ,if there is an exception or not ,
             we want to run some piece of code always--- 

  -> we can define our own defined exceptions ,from already given in the base class  ==(exceptions)